CS130 Project 1 - Design Document
=================================

Please answer all questions in this design document.  Note that the final
feedback section is optional, and you are not required to answer it if you
don't want to.

Unanswered or incompletely answered questions, or answers that don't actually
match the code/repository, will result in deductions.

Answers don't have to be deeply detailed!  We are mainly looking for an
overview or summary description of how your project works, and your team's
experiences working on this project.

Logistics (7 pts)
-----------------

L1.  [2pts] Enumerate all teammates here.
     Jacob Acosta, Cecilia Noble, Sebastian Lamas, Julia Gao


L2.  [2pts] What did each teammate focus on during this project?
     We used VS Code Liveshare and worked through most features together. Each member
     worked on a set of specific functions in each python file.


L3.  [3pts] Approximately how many hours did each teammate spend on the project?
     We each worked about 22 hours of this project.

Spreadsheet Engine Design (20 pts)
----------------------------------

D1.  [3pts] Briefly describe the high-level design abstractions (e.g. classes
     and/or submodules) in your spreadsheet engine, and what purposes these
     various abstractions fulfill.

     We have a workbook, sheet, graph, cell, formula evaluator, and cell ref finder class. 
     We also have separate files to store all location related functions that need to be 
     used often and a formulas.lark file to use for the formula evaluator.

     The workbook class includes a list of sheets which is keeping track of creation of Sheets,
     a sheet map which keeps track of each sheet name to actual sheet object, a sheet reference
     graph which keeps track of the cells referencing each sheet, the number of sheets, and
     another graph for keeping track of the cell's that reference each other. The workbook
     class is used to initialize a workbook and all the components it should include. The sheet class
     includes a tuple of extent which just keeps track of the size of the spreadsheet, the name
     of the sheet, and also a dictionary that stores the cell and its location. The sheet class is
     used to create a new sheet and store location of cells. The graph class has a forward and backward
     dictionary. The forward dictionary maps node A to a set of nodes which contains B if and
     only if directed edge A -> B exists in the graph and the backward dictionary maps node B to a 
     set of nodes which contains A if and only if directed edge A -> B exists in the graph. The graph
     class is used to create a directed graph and detect cycles and find dependecies. The cell class
     includes value and contents which is used for storing the value and contents of each cell. The cell
     class is used to create cells to be used by the spreadsheet and is able to set contents and get value
     of each cell. It also includes the cell error class which is used for raising an error when there is
     invalid input. The formula evaluator class is used to evaluate a formula. We store the workbook and 
     sheet to make sure that we are referencing the correct sheet in the workbook for formulas with cell 
     references. We also do error checking to make sure that our operations perform if given the correct 
     inputs. The cell ref finder class has a refs list and is used to find what once cell references.


D2.  [4pts] Why did you choose the design you chose?  Describe other designs
     (or perhaps earlier versions of the above design) that you considered,
     and why you ended up not using them.

     We chose this design to make different classes and keep the code more organized
     and clean for users to understand. We chose to move specific methods such as 
     all methods related to location into its own file as we use it quite a lot in
     different classes so it was easiest to be move into own class instead of
     repeating it in the multiple different classes. We used the same design method 
     that we mentioned from above and just moved around functions to where we thought
     made the most sense. We also combined two seperate files of formula evaluator and 
     cell reference into one file so that we only had to open the formulas.lark only once 
     and prevent duplicating code to make it easier to understand.


D3.  [4pts] At a high level (e.g. pseudocode or higher), enumerate the steps
     that your spreadsheet engine goes through when a caller sets a cell's
     contents.

     We check if the contents should be converted to 'None' (i.e it is empty, it includes only spaces).
     Then we need to remove all links between cells that reference that empty cell and recompute the 
     values of those cells referencing the empty cell. If not, we then strip contents of leading and trailing 
     space and set the cell value to be 'None.' We want to clear any links between sheets referencing
     the specific cell and any cells that reference the cell we are in. We then check if the contents
     is a formula. If it is, we try to parse the formula and if it doesn't work, we raise a parse error.
     Then, we find all the cell's it references and create links between the specific sheet and the cell. 
     We then link the referenced cell and the cell we are in. We also check if cycles exist in the 
     sheet between the cells and raise the circular reference error. We then recompute all the values of the
     cells that reference this cell and update the cells accordingly.

      1. Clear previous links in the dependency graphs for the workbook.
      2. If the contents are empty, whitespace, or None then the cell's value and contents are None
      3. Otherwise...

	1. The cell's contents are updated and stripped of leading and trailing whitespace.
        2. If the contents are a formula...

	   1. The formula is parsed.
	   2. The references in the formula are checked for validity and links are created in the
	      workbook's dependency graphs.
	   3. The dependency graph is searched for cycles.
	      - If found then all cells in the cycle have their value changed to a value error
	   4. The formula is evaluated and the value of the cell is the result.
	   5. If the result of the formula was None, then the cell gets a value of Decimal(0)

	   - If the process fails at any point (parse errors, bad references, cycles) an exception
	     is raised and caught and the value of the cell is set to an appropriate error value.

	3. If the contents are a single quote string then that's the cell's value.
	4. If the contents are an error string representation then that's the cell's value.
	5. If the contents parse as a finite decimal, then that's the cell's value.
	6. If none of the above cases apply, then the cell's value is its contents.

      4. Cells with formulas referencing this cell (directly or indirectly) have their formulas
        re-evaluated.


D4.  [3pts] How does your spreadsheet engine identify what other cells need
     updating when a cell's contents are changed, and what order to update them?

     When a cell's contents are changed, we first clear all the links between cells 
     that reference the cell we are updating the contents of. We then update the referencing
     cells by getting the ancestors of the cell from the graph we created. We use topological sort 
     on the ancestors to get them in the correct order. Once in the right order, we recompute the
     value of the cell by getting that cell's value from the get_value method after checking that
     value of the cell is not None and is not a part of a cycle.


D5.  [3pts] How does your spreadsheet engine identify cycles between cells when
     a cell update is performed?  Are cells in a cycle processed any differently
     from other cells outside of the cycle?

     When a cell update is performed, it uses the method set_contents(). In set_content(),
     we check if the content is a formula and if it is, then we check if there is a cycle in the graph 
     using the dependency graph we create by creating links between the different cells and sheets. 
     Once created, we can get the ancestors and use topological sort on the correctly ordered cells
     and recompute the cell's value. The value of the cells that are located in the cycle is set to
     the circular reference error and all other cells outside the cycle are keep the value it has.


D6.  [3pts] What steps does your spreadsheet engine go through when a sheet is
     deleted from a workbook?  How does it identify cells that may need to be
     recomputed after a sheet-deletion operation?

     When a spreadsheet is deleted from a workbook, we first remove the spreadsheet from
     the sheet map which is a dictionary from sheet name to actual sheet. Then, we remove the sheet
     from the list of sheets which keeps track of the order sheets are added. We have a graph
     that keeps track of what sheets a cell references. So the sheet that's being deleted points to
     the cells that use that sheet. Those cells that the sheet points to get a value of bad reference
     because we have removed that reference. The links are kept so that if the user adds a sheet with
     the same name, we can recompute the values of those cells. 


Implementation Process (23 pts)
-------------------------------

P1.  [4pts] How did your team break down and keep track of the various tasks to
     complete for this project?  Did you use the GitHub issue tracker, or some
     other tool like Trello?

     We didn't use GitHub tracker or Trello. We kept track of various tasks by
     writing to the README document and checked off tasks from the list when
     we finished each of them. We also added tasks to the document when we realized
     we missed features that needed to be implemented.


P2.  [4pts] How did you assign tasks to teammates?  Did you stick with your
     task-assignments through the project, or did you shift around tasks as the
     project progressed?  Why?

     We assigned tasks based on each other's strengths in understanding how the class/method
     should be implemented. We discussed as group how to implement the harder and
     more complex functions. Once we completed one task, we would move on to 
     another. Each of us also would look through the spec to find edge cases that we
     missed. We pushed our changes to a new brach and merged them. We sticked with
     what our assignments as we all chose ones that we thought we could complete.


P3.  [4pts] How would you characterize the quality of your project testing?
     Make sure to touch on these items:  Is it automated?  Is it easy for
     teammates to run?  Is it fast?  Is it reasonably complete?

     I think our project testing is ok. I think there could be improvements made such
     as making it automated with GitHub Actions and such so that everytime we push and commit, the 
     tests will run for us instead of manually running the tests. It is easy for teammates to
     run with just one command. It is fast with taking only 0.197s for 30 different tests.
     I would say that our tests is reasonably complete with trying to cover every edge
     case we can think of as well as testing all the examples in the spec.


P4.  [3pts] What mechanisms did your team use for communication during the
     project?  Did you find them to be effective?  What issues did you
     encounter, if any?

     As for communication during the project, we used Discord. Discord was an
     effective way for us to communicate with each other and could send links/screenshots
     easily. There was also the @ function to help us when we needed to notify each other
     of important tasks. We were also able to set up group meetings effectively. 
     One issue with Discord is that it was hard to discuss more complicated ideas so we 
     met up to discuss those.


P5.  [3pts] Did you use any kind of collaborative construction techniques, e.g.
     code reviews or pair-programming, during the project?  If so, what are your
     observations about its usefulness?  Did you find it to have any downsides?

     We used both code reviews and pair programming. We used pair programming especially
     during the project when we met up as a group. Some tasks were more complicated so
     pair programming was useful in bouncing ideas off of each other and implementing 
     the task. We used code reviews mostly at the end of the project to check that
     everything was fullfilled on the spec, and understand what another individual 
     implemented. Both of these collaborative techniques were useful in helping us 
     understand the complexity of each task and implement the tasks more efficiently. 
     One downside of pair programming is that both individuals have to been paying attention,
     otherwise, it would just be one individual doing the coding. 


P6.  [5pts] What would you like to improve about your team's development
     process, going forward?

     One improvement would be assigning tasks to each individual and being more clear
     about who does what. As for the more complicated tasks, pair programming could be
     used more to help implement the task more efficiently. Another improvement could be 
     how we organize to work together as a group. The issue with live share is that 
     one individual might want to run a test but needs to wait until another finishes
     writing the specific function. We could potentially imporve this by learning how to
     use GitHub such as GitHub Actions or using a different platform to work.

Section F:  CS130 Project 1 Feedback [OPTIONAL]
-----------------------------------------------

These questions are OPTIONAL, and you do not need to answer them.  Your grade
will not be affected by answering or not answering them.  Also, your grade will
not be affected by negative feedback - we want to know what went poorly so that
we can improve future versions of the course.

F1.  What parts of the assignment did you find highly enjoyable?  Conversely,
     what parts of the assignment did you find unenjoyable?


F2.  What parts of the assignment helped you learn more about software
     engineering best-practices, or other useful development skills?
     What parts were not helpful in learning these skills?


F3.  Were there any parts of the assignment that seemed _unnecessarily_ tedious?
     (Some parts of software development are always tedious, of course.)


F4.  Do you have any feedback and/or constructive criticism about how this
     project can be made better in future iterations of CS130?
